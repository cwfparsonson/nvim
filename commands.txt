----------------------------------------------------
# TMUX
------------------------------------------------------
set -g prefix C-a (Sets prefix to Ctrl-a)
tmux ls (check what is running)
tmux list-panes -a
tmux list-window
ctrl+b, d (close tmux window)

# Basic
<leader>, " (split panes horizontally)
<leader>, % (split panes vertically)
tmux move-pane -s 3:0
<leader> + dont release + arrow keys (resize pane)
<leader>, c (create new window)
<leader>, n (move to next window)
<leader>, p (move to previous window)
exit (close single tmux pane)
<leader>, :kill-session (close all windows and/or panes at once)

tmux new -s <session-name> (create session)
tmux attach-session -t <session-name> (go into session already created)
tmux kill-session -t <session-name>

# Creating New SSH Tunnel (mammoth port: 6017, berlin port: 10017)
1. In terminal, ssh into final server you want to tunnel to
2. tmux new -s <name_of_session>
3. (tmux attach-session -t <session_name>) if didn't open automatically
3. conda activate <env_name> (env should have e.g. jupyter installed)
4. jupyter-notebook --port=mammoth_port_#### (port no. e.g. 6002). Make a note of the link with the token
5. ctrl+b, d (detach from tmux)
6. exit (go back to berlin server if remote accessing from laptop)
7. ssh -Nf -L berlin_port_####:localhost:mammoth_port_#### mammoth
8. exit (go back to local machine)
9. ssh -Nf -L mammoth_port_####:localhost:berlin_port_#### zciccwf@ssh.ee.ucl.ac.uk
10. localhost:mammoth_port_#### (type into internet search bar)
11. if prompted, copy-paste the token=<copy-paste-this-token> into prompt asking for password/token

lsof -ti:<port_numer> (list all processes using port number)
lsof -ti:<port_number> | xargs kill -9 (kill all processes using port number)

----------------------------------------------------
# LINUX
------------------------------------------------------
dpkg -L <packagename> (to find where package is installed)
pwd (print working directory)
grep -w <word> * (search all files in directory for word)
grep -r <word> * (recursively search all directories and subdirectories)
chown user <filename> (change ownership of file)
mv <oldfile.txt> <newfile.txt> (rename file) 
du -s -h <filename> (show the disk usage of a certain folder)
chmod -R 777 <filename> (give all users permissions to make directories under that directory)
dd if=/dev/zero of=/dev/sdX bs=1M #replace X with the target drive letter. (wipe a disk by filling it with zeros)
history (shows all previous commands used)
dmesg (prints our message buffer of kernel, good for debugging)
exit (exit ssh'd server)

grep -rnw -e '<str>' (recursively look for string in all child trees/dirs/files)
grep -rl $'<oldstr>' . | xargs sed -i s@'<oldstr>'@'<newstr>'@g (find and replace all oldstr with new str in all child trees/dirs/files)

------------------------------------------------------





------------------------------------------------------
# NEOVIM
------------------------------------------------------
# Basic
h j k l (left up down right)
nvim <filename> (open file with neovim)
p>          " disable arrow
i (insert mode)
I (go to start of line insert mode)
A (go to end of line insert mode)
a (go to rhs of current character insert mode)
O (go to line above insert mode)
o (go to line below insert mode)
:q (quits file)
:q! (force quit)
:wq (save and quit)
:w (save file)
:<lineNumber> (takes you to line)
:PlugInstall (installs new plugin)
Ctrl-w <arrowKey> (switch panes)
V (select line)
v (select characters)
y (yank the selection)
p (paste on line below)
P (paste on line above)
d (cut selections)
u (undo)
Ctrl-R (redo)
gg (go to top of file)
G (go to EOF)
0 (go to start of line)
$ (go to EOL)
w (next word)
6w (skip to 6th word)
b (prev word)
( (end of sentence)
) (start of sentence)
{ (jump down code block)
} (jump up code block)
<num_lines><down_key> (go number of lines down)
<num_lines><up_key> (go number of lines up)
esc (go to command mode from insert mode)
:set paste (takes you to paste mode)
	p (paste)
	shift ins (paste from clipboard into terminal)
	:set nopaste (leave paste mode)
<map_leader>cs (sexy comment, any lang)
<map_leader>cu (uncomment, any lang)
<map_leader><c<space> (normal comment)
:%s/<find>/<replace>/gc (find and replace globally with confirm message)

# Navigation
:tab new (open new tab)
:E (list files & folders in dir)
<Enter> (select file/folder)
gt (go to right tab)
gT (go to left tab)

# Nerd tree navigation
ctrl+n (open nerd tree)
t: (Open the selected file in a new tab)
i: (Open the selected file in a horizontal split window)
s: (Open the selected file in a vertical split window)
I: (Toggle hidden files)
m: (Show the NERD Tree menu)
R: (Refresh the tree, useful if files change outside of Vim)
?: (Toggle NERD Tree's quick help)






------------------------------------------------------
# GIT
------------------------------------------------------
# force pull
git fetch --all
git reset --hard origin/master
git pull origin master

# force push
git push <remote_url> --force

git remote -v (list remote origin)

# change remote origin
git remote rm origin (remove origins)
git remote add origin <remote_url>
git config master.remote origin
git config master.merge refs/heads/master

# revert local repo to a previous commit (can then push)
git revert --no-commit <commit_unique_token>..HEAD
git commit





------------------------------------------------------
# JEKYLL, BUNDLE & GITHUB PAGES
------------------------------------------------------
bundle exec jekyll serve --force_polling (build site locally, then http://localhost:4000) (N.B. If make change to .yml, must restart to refresh)
















